
module top (hz100, reset, pb, ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0,
            left, right, red, green, blue);
  input hz100, reset;
  input [20:0] pb;
  output [7:0] ss7, ss6, ss5, ss4, ss3, ss2, ss1, ss0, left, right;
  output red, green, blue;
  // This is the instruction set trainer implementation built for you...
  support12 sup (.clk (hz100), .reset (reset), .in (pb),
                 .out7 (ss7), .out6 (ss6), .out5 (ss5), .out4 (ss4),
                 .out3 (ss3), .out2 (ss2), .out1 (ss1), .out0 (ss0));
endmodule

module alu(out, fout, in1, in2, fin, op);
  output reg [31:0] out;
  output reg [3:0] fout;
  input [31:0] in1, in2;
  input [3:0] fin;
  input [4:0] op;

  // This table is replicated in the idms module.
  localparam ALU_ADD = 5'd0;
  localparam ALU_ADC = 5'd1;
  localparam ALU_SUB = 5'd2;
  localparam ALU_SBC = 5'd3;
  localparam ALU_NEG = 5'd4;
  localparam ALU_LSL = 5'd5;
  localparam ALU_ASR = 5'd6;
  localparam ALU_LSR = 5'd7;
  localparam ALU_ROR = 5'd8;
  localparam ALU_OR  = 5'd9;
  localparam ALU_AND = 5'd10;
  localparam ALU_BIC = 5'd11;
  localparam ALU_XOR = 5'd12;
  localparam ALU_NOT = 5'd13;
  localparam ALU_SXB = 5'd14;
  localparam ALU_SXW = 5'd15;
  localparam ALU_ZXB = 5'd16;
  localparam ALU_ZXW = 5'd17;
  localparam ALU_IN1 = 5'd18;
  localparam ALU_IN2 = 5'd19;

  wire Nin, Zin, Cin, Vin;
  assign fin  = {Nin, Zin, Cin, Vin};

  wire N = (out[31] == 0) ? 0 : 1; // REPLACE
  wire Z = 1; // REPLACE
  wire C = 1; // REPLACE
  wire V = 1; // REPLACE

  always @(*)
    case(op)
      ALU_ADD: begin 
        out= in1 + in2;   
        fout={N,Z,C,V}; 
      end
     
      // add the rest of the cases here...
       ALU_ADC: begin
        out = in1 + in2 +Cin;
        fout = {N,Z,C,V};
      end
      ALU_SUB: begin
        out = in1 - in2;
        fout = {N,Z,C,V};
      end
      ALU_SBC: begin
        out = in1 - in2 + Cin;
        fout = {N,Z,C,V};
      end
      ALU_NEG: begin
        out = 0 - in2;
        fout = {N,Z,C,V};
      end
      ALU_OR: begin
        out = in1 | in2;
        fout = {N,Z};
      end
      ALU_AND: begin
        out = in1 & in2;
        fout = {N,Z};
      end
      ALU_BIC: begin
        out = in1 & ~in2;
        fout = {N,Z};
      end
      ALU_XOR: begin
        out = in1 ^ in2;
        fout = {N,Z};
      end
      ALU_NOT: begin
        out = ~in2;
        fout = {N,Z};
      end
      ALU_ZXB: begin
        out = {24'b0, in2[7:0]};
        fout = {N,Z};
      end
      ALU_IN1: begin
        out = in1;
        fout = {N,Z};
      end
      ALU_IN2: begin
        out = in2;
        fout = {N,Z};
      end
      
    default: begin 
      out=0;     
      fout={Nin,Zin,Cin,Vin}; 
      end
    endcase

endmodule

module scankey (clk, reset, in, strobe, out);
  input wire clk;
  input wire reset;
  input wire [19:0] in;
  output strobe;
  output [4:0] out;
  reg [1:0] delay;
  wire tempstrobe;
  
  always_ff @ (posedge clk) 
    delay <= (delay << 1) | {1'b0, tempstrobe};
  
  assign strobe = delay[1];
  
  assign tempstrobe = out[0] | out[1] | out[2] | out[3] | out[4] | out[5] | in[0];
  assign out[0] = in[1] | in[3] | in[5] | in[7] | in[9] | in[11] | in[13] | in[15] | in[17] | in[19];
  assign out[1] = in[2] | in[3] | in[6] | in[7] | in[10] | in[11] | in[14] | in[15] | in[18] | in[19];
  assign out[2] = in[4] | in[5] | in[6] | in[7] | in[12] | in[13] | in[14] | in[15];
  assign out[3] = in[8] | in[9] | in[10] | in[11] | in[12] | in[13] | in[14];
  assign out[4] = in[16] | in[17] | in[18] | in[19];

endmodule

module ssdec(in, enable, out);
  input [3:0] in;
  input enable;
  output [7:0] out;
  wire [15:0] y;
  
  wire a,b,c,d,e,f,g;
  assign out = {g,f,e,d,c,b,a}; // connect A-G to ss0

  // Your segment decode statements go below.
  assign a = ~(y[1] | y[4] | y[11] | y[13]) & enable;
  assign b = ~(y[5] | y[6] | y[11] | y[12] | y[14] | y[15]) & enable;
  assign c = ~(y[2] | y[12] | y[14] | y[15]) & enable;
  assign d = ~(y[1] | y[4] | y[7] | y[10] | y[15]) & enable;
  assign e = ~(y[1] | y[3] | y[4] | y[5] | y[7] | y[9]) & enable;
  assign f = ~(y[1] | y[2] | y[3] | y[7] | y[13]) & enable;
  assign g = ~(y[0] | y[1] | y[7] | y[12]) & enable;
  
   assign y    = { enable &  in[3] &  in[2] &  in[1] &  in[0],
                  enable &  in[3] &  in[2] &  in[1] & ~in[0],
                  enable &  in[3] &  in[2] & ~in[1] &  in[0],
                  enable &  in[3] &  in[2] & ~in[1] & ~in[0],
                  enable &  in[3] & ~in[2] &  in[1] &  in[0],
                  enable &  in[3] & ~in[2] &  in[1] & ~in[0],
                  enable &  in[3] & ~in[2] & ~in[1] &  in[0],
                  enable &  in[3] & ~in[2] & ~in[1] & ~in[0],
                  enable & ~in[3] &  in[2] &  in[1] &  in[0],
                  enable & ~in[3] &  in[2] &  in[1] & ~in[0],
                  enable & ~in[3] &  in[2] & ~in[1] &  in[0],
                  enable & ~in[3] &  in[2] & ~in[1] & ~in[0],
                  enable & ~in[3] & ~in[2] &  in[1] &  in[0],
                  enable & ~in[3] & ~in[2] &  in[1] & ~in[0],
                  enable & ~in[3] & ~in[2] & ~in[1] &  in[0],
                  enable & ~in[3] & ~in[2] & ~in[1] & ~in[0] };
  
endmodule
